{
  "refactorings": {
    "spoon-smpl/src/main/java/spoon/smpl/CFGModel.java": [
      {
        "fromLine": 205,
        "toLine": 222,
        "oldContent": "\tprivate SmPLMethodCFG cfg;\n\n\t/**\n\t * The set of state IDs.\n\t */\n\tprivate List<Integer> states;\n\n\t/**\n\t * The set of immediate successors.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * The set of state labels.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n}\n",
        "newContent": "\tprivate SmPLMethodCFG cfg;\n\tprivate ModelData modelData;\n}\n"
      }
    ],
    "spoon-smpl/src/main/java/spoon/smpl/MethodHeaderModel.java": [
      {
        "fromLine": 362,
        "toLine": 382,
        "oldContent": "\t/**\n\t * States of the CTL model.\n\t */\n\tprivate List<Integer> states;\n\n\t/**\n\t * Successors of the CTL model.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * Labels of the CTL model.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n\n\t/**\n\t * Name of executable in wrapper invocation for encoding method return type.\n\t */\n\tprivate static final String methodReturnTypeElementName = \"__MethodHeaderReturnType__\";",
        "newContent": "\tprivate ModelData modelData;\n\n\t/**\n\t * Name of executable in wrapper invocation for encoding method return type.\n\t */\n\tprivate static final String methodReturnTypeElementhName = \"__MethodHeaderReturnType__\";"
      }
    ],
    "spoon-smpl/src/test/java/spoon/smpl/ModelCheckerTest.java": [
      {
        "fromLine": 35,
        "toLine": 87,
        "oldContent": "private static class ModelBuilder implements Model {\n\t\tpublic List<Integer> states;\n\t\tpublic Map<Integer, List<Integer>> successors;\n\t\tpublic Map<Integer, List<Label>> labels;\n\n\t\tpublic ModelBuilder() {\n\t\t\tstates = new ArrayList<Integer>();\n\t\t\tsuccessors = new HashMap<Integer, List<Integer>>();\n\t\t\tlabels = new HashMap<Integer, List<Label>>();\n\t\t}\n\n\t\tpublic ModelBuilder addStates(int... n) {\n\t\t\tfor (int nn : n) {\n\t\t\t\tstates.add(nn);\n\t\t\t\tsuccessors.put(nn, new ArrayList<Integer>());\n\t\t\t\tlabels.put(nn, new ArrayList<Label>());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic ModelBuilder addTransition(int from, int to) {\n\t\t\tsuccessors.get(from).add(to);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic ModelBuilder addLabel(int state, Label label) {\n\t\t\tlabels.get(state).add(label);\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Integer> getStates() {\n\t\t\treturn states;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Integer> getSuccessors(int state) {\n\t\t\treturn successors.get(state);\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Label> getLabels(int state) {\n\t\t\treturn labels.get(state);\n\t\t}\n\t}",
        "newContent": "private static class ModelBuilder implements Model {\n\t\tprivate ModelData modelData;\n\n\t\tpublic ModelBuilder() {\n\t\t\tmodelData = new ModelData();\n\t\t}\n\n\t\tpublic ModelBuilder addStates(int... n) {\n\t\t\tfor (int nn : n) {\n\t\t\t\tmodelData.addState(nn);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic ModelBuilder addTransition(int from, int to) {\n\t\t\tmodelData.addSuccessor(from, to);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic ModelBuilder addLabel(int state, Label label) {\n\t\t\tmodelData.addLabel(state, label);\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Integer> getStates() {\n\t\t\treturn modelData.getStates();\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Integer> getSuccessors(int state) {\n\t\t\treturn modelData.getSuccessors(state);\n\t\t}\n\n\t\t@Override\n\t\tpublic List<Label> getLabels(int state) {\n\t\t\treturn modelData.getLabels(state);\n\t\t}\n\t}"
      }
    ]
  },
  "extractedClasses": {
    "spoon-smpl/src/main/java/spoon/smpl/ModelData.java": "public class ModelData {\n\n\tprivate List<Integer> states;\n\tprivate Map<Integer, List<Integer>> successors;\n\tprivate Map<Integer, List<Label>> labels;\n\n\tpublic ModelData() {\n\t\tstates = new ArrayList<>();\n\t\tsuccessors = new HashMap<>();\n\t\tlabels = new HashMap<>();\n\t}\n\n\tpublic void addState(int state) {\n\t\tstates.add(state);\n\t\tsuccessors.put(state, new ArrayList<>());\n\t\tlabels.put(state, new ArrayList<>());\n\t}\n\n\tpublic void addSuccessor(int from, int to) {\n\t\tsuccessors.get(from).add(to);\n\t}\n\n\tpublic void addLabel(int state, Label label) {\n\t\tlabels.get(state).add(label);\n\t}\n\n\tpublic List<Integer> getStates() {\n\t\treturn states;\n\t}\n\n\tpublic List<Integer> getSuccessors(int state) {\n\t\treturn successors.get(state);\n\t}\n\n\tpublic List<Label> getLabels(int state) {\n\t\treturn labels.get(state);\n\t}\n}\n"
  },
  "tenperature": 0.9,
  "date": "2024-07-16T13:56:46.903Z"
}