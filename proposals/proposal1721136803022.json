{
  "refactorings": {
    "spoon-smpl/src/main/java/spoon/smpl/CFGModel.java": [],
    "spoon-smpl/src/main/java/spoon/smpl/MethodHeaderModel.java": [
      {
        "fromLine": 80,
        "toLine": 147,
        "oldContent": "\t\tstates = IntStream.range(0, numstates).boxed().collect(Collectors.toList());\n\t\tsuccessors = new HashMap<>();\n\t\tlabels = new HashMap<>();\n\n\t\tstates.forEach((s) -> {\n\t\t\tsuccessors.put(s, new ArrayList<>());\n\t\t\tlabels.put(s, new ArrayList<>());\n\n\t\t\tif (s + 1 < numstates) {\n\t\t\t\tsuccessors.get(s).add(s + 1);\n\t\t\t} else {\n\t\t\t\tsuccessors.get(s).add(s);\n\t\t\t}\n\t\t});\n\n\t\tFactory factory = ctExecutable.getFactory();\n\n\t\tlabels.get(0).add(new StatementLabel(createMethodReturnTypeElement(ctExecutable.getType())));\n\t\tlabels.get(1).add(new StatementLabel(createMethodNameElement(ctExecutable.getSimpleName(), factory)));\n\t\tlabels.get(numstates - 1).add(new PropositionLabel(\"after\"));\n\n\t\tfor (int i = 2; i < numstates - 1; ++i) {\n\t\t\tlabels.get(i).add(new StatementLabel(ctExecutable.getParameters().get(i - 2)));\n\t\t}",
        "newContent": "\t\tctlModelState = new CTLModelState(numstates, ctExecutable);\n"
      },
      {
        "fromLine": 362,
        "toLine": 382,
        "oldContent": "\tprivate List<Integer> states;\n\n\t/**\n\t * Successors of the CTL model.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * Labels of the CTL model.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n",
        "newContent": "\tprivate CTLModelState ctlModelState;\n"
      }
    ],
    "spoon-smpl/src/test/java/spoon/smpl/ModelCheckerTest.java": [
      {
        "fromLine": 35,
        "toLine": 87,
        "oldContent": "\tpublic List<Integer> states;\n\t\tpublic Map<Integer, List<Integer>> successors;\n\t\tpublic Map<Integer, List<Label>> labels;\n\n\t\tpublic ModelBuilder() {\n\t\t\tstates = new ArrayList<Integer>();\n\t\t\tsuccessors = new HashMap<Integer, List<Integer>>();\n\t\t\tlabels = new HashMap<Integer, List<Label>>();\n\t\t}",
        "newContent": "\tpublic CTLModelState ctlModelState;\n\n\t\tpublic ModelBuilder() {\n\t\t\tctlModelState = new CTLModelState();\n\t\t}"
      },
      {
        "fromLine": 126,
        "toLine": 136,
        "oldContent": "\t\tModelBuilder model = new ModelBuilder();\n\t\tmodel.addStates(1, 2, 3)\n\t\t\t .addTransition(1, 2)\n\t\t\t .addTransition(2, 3)",
        "newContent": "\t\tModelBuilder model = new ModelBuilder();\n\t\tmodel.ctlModelState.addStates(1, 2, 3)\n\t\t\t .addTransition(1, 2)\n\t\t\t .addTransition(2, 3)"
      },
      {
        "fromLine": 149,
        "toLine": 159,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 175,
        "toLine": 185,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 204,
        "toLine": 214,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 237,
        "toLine": 247,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 270,
        "toLine": 280,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 297,
        "toLine": 307,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 324,
        "toLine": 334,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 349,
        "toLine": 359,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 440,
        "toLine": 451,
        "oldContent": "",
        "newContent": ""
      },
      {
        "fromLine": 468,
        "toLine": 478,
        "oldContent": "",
        "newContent": ""
      }
    ]
  },
  "extractedClasses": {
    "spoon-smpl/src/main/java/spoon/smpl/CTLModelState.java": "public class CTLModelState {\n\tprivate List<Integer> states;\n\n\t/**\n\t * Successors of the CTL model.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * Labels of the CTL model.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n\n\tpublic CTLModelState() {\n\t\tstates = new ArrayList<Integer>();\n\t\tsuccessors = new HashMap<Integer, List<Integer>>();\n\t\tlabels = new HashMap<Integer, List<Label>>();\n\t}\n\n\tpublic CTLModelState(int numstates, CtExecutable<?> ctExecutable) {\n\t\tthis();\n\t\t// Implementation for initializing states, successors, and labels based on the CtExecutable\n\t\t// ...\n\t}\n\n\t// Additional methods such as getters and methods for managing states, successors, and labels\n\t// ...\n}\n"
  },
  "tenperature": 0.9,
  "date": "2024-07-16T13:33:23.015Z"
}