{
  "refactorings": {
    "src/main/java/spoon/reflect/visitor/ElementPrinterHelper.java": [
      {
        "fromLine": 504,
        "toLine": 533,
        "oldContent": "\tprivate ListPrinter createListPrinter(boolean startPrefixSpace, String start, boolean startSufficSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\treturn new ListPrinter(printer, startPrefixSpace, start, startSufficSpace, nextPrefixSpace, next, nextSuffixSpace, endPrefixSpace, end);\n\t}",
        "newContent": "\tprivate ListPrinter createListPrinter(ListPrinterConfig config) {\n\t\treturn new ListPrinter(printer, config);\n\t}"
      },
      {
        "fromLine": 550,
        "toLine": 580,
        "oldContent": "\tpublic <T> void printList(Iterable<T> iterable,\n\t\t\tString startKeyword,\n\t\t\tboolean startPrefixSpace, String start, boolean startSuffixSpace,\n\t\t\tboolean nextPrefixSpace, String next, boolean nextSuffixSpace,\n\t\t\tboolean endPrefixSpace, String end,\n\t\t\tConsumer<T> elementPrinter) {\n\n\t\tif (startKeyword != null) {\n\t\t\tprinter.writeSpace().writeKeyword(startKeyword).writeSpace();\n\t\t}\n\t\ttry (spoon.reflect.visitor.ListPrinter lp = createListPrinter(\n\t\t\t\tstartPrefixSpace, start, startSuffixSpace,\n\t\t\t\tnextPrefixSpace, next, nextSuffixSpace,\n\t\t\t\tendPrefixSpace, end\n\t\t\t)) {\n\t\t\tfor (T item : iterable) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\telementPrinter.accept(item);\n\t\t\t}",
        "newContent": "\tpublic <T> void printList(Iterable<T> iterable, String startKeyword, ListPrinterConfig config, Consumer<T> elementPrinter) {\n\n\t\tif (startKeyword != null) {\n\t\t\tprinter.writeSpace().writeKeyword(startKeyword).writeSpace();\n\t\t}\n\t\ttry (spoon.reflect.visitor.ListPrinter lp = createListPrinter(config)) {\n\t\t\tfor (T item : iterable) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\telementPrinter.accept(item);\n\t\t\t}"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/ElementPrinterHelper.java": [
      {
        "fromLine": 0,
        "toLine": 9,
        "oldContent": "public class ElementPrinterHelper {\r\n\tpublic ListPrinter createListPrinter(boolean startPrefixSpace, String start, boolean startSufficSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\r\n\t\treturn null;\r\n\t}\r\n}",
        "newContent": "public class ElementPrinterHelper {\r\n\tpublic ListPrinter createListPrinter(ListPrinterConfig config) {\r\n\t\treturn null;\r\n\t}\r\n}"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/NewPattern.java": [
      {
        "fromLine": 16,
        "toLine": 30,
        "oldContent": "\tprivate void patternModel(OldPattern.Parameters params) throws Exception {\r\n\t\telementPrinterHelper.printList(params.getIterable.S(), \r\n\t\t\t\tparams.startPrefixSpace, \r\n\t\t\t\tparams.start, \r\n\t\t\t\tparams.startSuffixSpace, \r\n\t\t\t\tparams.nextPrefixSpace, \r\n\t\t\t\tparams.next, \r\n\t\t\t\tparams.nextSuffixSpace, \r\n\t\t\t\tparams.endPrefixSpace, \r\n\t\t\t\tparams.end,\r\n\t\t\t\tv -> {\r\n\t\t\t\t\tparams.statements.S();\r\n\t\t\t\t});\r\n\t}",
        "newContent": "\tprivate void patternModel(OldPattern.Parameters params) throws Exception {\r\n\t\tListPrinterConfig config = new ListPrinterConfig(params.startPrefixSpace, params.start, params.startSuffixSpace, params.nextPrefixSpace, params.next, params.nextSuffixSpace, params.endPrefixSpace, params.end);\r\n\t\telementPrinterHelper.printList(params.getIterable.S(), config, v -> {\r\n\t\t\t\tparams.statements.S();\r\n\t\t\t});\r\n\t}"
      },
      {
        "fromLine": 52,
        "toLine": 62,
        "oldContent": "\tinterface ElementPrinterHelper {\r\n\t\tvoid printList(Iterable<Item> $getItems$, \r\n\t\t\t\tboolean startPrefixSpace, String start, boolean startSufficSpace, \r\n\t\t\t\tboolean nextPrefixSpace, String next, boolean nextSuffixSpace, \r\n\t\t\t\tboolean endPrefixSpace, String end, \r\n\t\t\t\tConsumer<Item> consumer);\r\n\t}",
        "newContent": "\tinterface ElementPrinterHelper {\r\n\t\tvoid printList(Iterable<Item> $getItems$, ListPrinterConfig config, Consumer<Item> consumer);\r\n\t}"
      }
    ],
    "src/main/java/spoon/reflect/visitor/ListPrinter.java": [
      {
        "fromLine": 8,
        "toLine": 39,
        "oldContent": "public class ListPrinter implements Closeable {\n\n\tprivate final TokenWriter printerTokenWriter;\n\tprivate final boolean nextPrefixSpace;\n\tprivate final String separator;\n\tprivate final boolean nextSuffixSpace;\n\tprivate final boolean endPrefixSpace;\n\tprivate final String end;\n\tprivate boolean isFirst = true;\n\n\tpublic ListPrinter(TokenWriter printerHelper, boolean startPrefixSpace, String start, boolean startSuffixSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\tthis.printerTokenWriter = printerHelper;\n\t\tthis.nextPrefixSpace = nextPrefixSpace;\n\t\tthis.separator = next;\n\t\tthis.nextSuffixSpace = nextSuffixSpace;\n\t\tthis.endPrefixSpace = endPrefixSpace;\n\t\tthis.end = end;\n\n\t\tif (startPrefixSpace) {\n\t\t\tprinterHelper.writeSpace();\n\t\t}\n\t\tif (start != null && !start.isEmpty()) {",
        "newContent": "public class ListPrinter implements Closeable {\n\n\tprivate final TokenWriter printerTokenWriter;\n\tprivate final ListPrinterConfig config;\n\tprivate boolean isFirst = true;\n\n\tpublic ListPrinter(TokenWriter printerHelper, ListPrinterConfig config) {\n\t\tthis.printerTokenWriter = printerHelper;\n\t\tthis.config = config;\n\n\t\tif (config.isStartPrefixSpace()) {\n\t\t\tprinterHelper.writeSpace();\n\t\t}\n\t\tif (config.getStart() != null && !config.getStart().isEmpty()) {"
      },
      {
        "fromLine": 55,
        "toLine": 82,
        "oldContent": "\t\t\tisFirst = false;\n\t\t} else {\n\t\t\t/*\n\t\t\t * we are starting separator item. Print `separator` separator now\n\t\t\t */\n\t\t\tif (nextPrefixSpace) {\n\t\t\t\tprinterTokenWriter.writeSpace();\n\t\t\t}\n\t\t\tif (separator != null && !separator.isEmpty()) {\n\t\t\t\tprinterTokenWriter.writeSeparator(separator);\n\t\t\t}\n\t\t\tif (nextSuffixSpace) {\n\t\t\t\tprinterTokenWriter.writeSpace();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tif (endPrefixSpace) {\n\t\t\tprinterTokenWriter.writeSpace();\n\t\t}\n\t\tif (end != null && !end.isEmpty()) {\n\t\t\tprinterTokenWriter.writeSeparator(end);\n\t\t}\n\t}\n",
        "newContent": "\t\t\tisFirst = false;\n\t\t} else {\n\t\t\t/*\n\t\t\t * we are starting separator item. Print `separator` separator now\n\t\t\t */\n\t\t\tif (config.isNextPrefixSpace()) {\n\t\t\t\tprinterTokenWriter.writeSpace();\n\t\t\t}\n\t\t\tif (config.getSeparator() != null && !config.getSeparator().isEmpty()) {\n\t\t\t\tprinterTokenWriter.writeSeparator(config.getSeparator());\n\t\t\t}\n\t\t\tif (config.isNextSuffixSpace()) {\n\t\t\t\tprinterTokenWriter.writeSpace();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tif (config.isEndPrefixSpace()) {\n\t\t\tprinterTokenWriter.writeSpace();\n\t\t}\n\t\tif (config.getEnd() != null && !config.getEnd().isEmpty()) {\n\t\t\tprinterTokenWriter.writeSeparator(config.getEnd());\n\t\t}\n\t}\n"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/OldPattern.java": [
      {
        "fromLine": 41,
        "toLine": 55,
        "oldContent": "try (spoon.reflect.visitor.ListPrinter lp = elementPrinterHelper.createListPrinter(\r\n\t\t\t\tparams.startPrefixSpace, \r\n\t\t\t\tparams.start, \r\n\t\t\t\tparams.startSuffixSpace, \r\n\t\t\t\tparams.nextPrefixSpace, \r\n\t\t\t\tparams.next, \r\n\t\t\t\tparams.nextSuffixSpace, \r\n\t\t\t\tparams.endPrefixSpace, \r\n\t\t\t\tparams.end\r\n\t\t\t)) {\r\n\t\t\tfor (Item item : params.getIterable.S()) {\r\n\t\t\t\tlp.printSeparatorIfAppropriate();\r\n\t\t\t\tparams.statements.S();\r\n\t\t\t}",
        "newContent": "try (spoon.reflect.visitor.ListPrinter lp = elementPrinterHelper.createListPrinter(new ListPrinterConfig(params.startPrefixSpace, params.start, params.startSuffixSpace, params.nextPrefixSpace, params.next, params.nextSuffixSpace, params.endPrefixSpace, params.end))) {\r\n\t\t\tfor (Item item : params.getIterable.S()) {\r\n\t\t\t\tlp.printSeparatorIfAppropriate();\r\n\t\t\t\tparams.statements.S();\r\n\t\t\t}"
      }
    ]
  },
  "extractedClasses": {
    "src/main/java/spoon/reflect/visitor/ListPrinterConfig.java": "package spoon.reflect.visitor;\n\npublic class ListPrinterConfig {\n\n\tprivate final boolean startPrefixSpace;\n\tprivate final String start;\n\tprivate final boolean startSuffixSpace;\n\tprivate final boolean nextPrefixSpace;\n\tprivate final String separator;\n\tprivate final boolean nextSuffixSpace;\n\tprivate final boolean endPrefixSpace;\n\tprivate final String end;\n\n\tpublic ListPrinterConfig(boolean startPrefixSpace, String start, boolean startSuffixSpace, boolean nextPrefixSpace, String separator, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\tthis.startPrefixSpace = startPrefixSpace;\n\t\tthis.start = start;\n\t\tthis.startSuffixSpace = startSuffixSpace;\n\t\tthis.nextPrefixSpace = nextPrefixSpace;\n\t\tthis.separator = separator;\n\t\tthis.nextSuffixSpace = nextSuffixSpace;\n\t\tthis.endPrefixSpace = endPrefixSpace;\n\t\tthis.end = end;\n\t}\n\n\tpublic boolean isStartPrefixSpace() {\n\t\treturn startPrefixSpace;\n\t}\n\n\tpublic String getStart() {\n\t\treturn start;\n\t}\n\n\tpublic boolean isStartSuffixSpace() {\n\t\treturn startSuffixSpace;\n\t}\n\n\tpublic boolean isNextPrefixSpace() {\n\t\treturn nextPrefixSpace;\n\t}\n\n\tpublic String getSeparator() {\n\t\treturn separator;\n\t}\n\n\tpublic boolean isNextSuffixSpace() {\n\t\treturn nextSuffixSpace;\n\t}\n\n\tpublic boolean isEndPrefixSpace() {\n\t\treturn endPrefixSpace;\n\t}\n\n\tpublic String getEnd() {\n\t\treturn end;\n\t}\n}\n"
  },
  "tenperature": 0.9,
  "date": "2024-07-16T19:27:04.229Z"
}