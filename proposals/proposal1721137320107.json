{
  "refactorings": {
    "spoon-smpl/src/main/java/spoon/smpl/CFGModel.java": [
      {
        "fromLine": 205,
        "toLine": 222,
        "oldContent": "\tprivate SmPLMethodCFG cfg;\n\n\t/**\n\t * The set of state IDs.\n\t */\n\tprivate List<Integer> states;\n\n\t/**\n\t * The set of immediate successors.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * The set of state labels.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n}\n",
        "newContent": "\tprivate CTLModel ctlModel;\n"
      }
    ],
    "spoon-smpl/src/main/java/spoon/smpl/MethodHeaderModel.java": [
      {
        "fromLine": 362,
        "toLine": 382,
        "oldContent": "\t}\n\n\t/**\n\t * States of the CTL model.\n\t */\n\tprivate List<Integer> states;\n\n\t/**\n\t * Successors of the CTL model.\n\t */\n\tprivate Map<Integer, List<Integer>> successors;\n\n\t/**\n\t * Labels of the CTL model.\n\t */\n\tprivate Map<Integer, List<Label>> labels;\n\n\t/**\n\t * Name of executable in wrapper invocation for encoding method return type.\n\t */\n\tprivate static final String methodReturnTypeElementName = \"__MethodHeaderReturnType__\";",
        "newContent": "\tprivate CTLModel ctlModel;\n\n\t/**\n\t * Name of executable in wrapper invocation for encoding method return type.\n\t */\n\tprivate static final String methodReturnTypeElementName = \"__MethodHeaderReturnType__\";"
      }
    ],
    "spoon-smpl/src/test/java/spoon/smpl/ModelCheckerTest.java": [
      {
        "fromLine": 35,
        "toLine": 87,
        "oldContent": "private static class ModelBuilder implements Model {\n\t\tpublic List<Integer> states;\n\t\tpublic Map<Integer, List<Integer>> successors;\n\t\tpublic Map<Integer, List<Label>> labels;\n\n\t\tpublic ModelBuilder() {\n\t\t\tstates = new ArrayList<Integer>();\n\t\t\tsuccessors = new HashMap<Integer, List<Integer>>();\n\t\t\tlabels = new HashMap<Integer, List<Label>>();\n\t\t}",
        "newContent": "\tprivate CTLModel ctlModel;\n"
      },
      {
        "fromLine": 126,
        "toLine": 136,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 149,
        "toLine": 159,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 175,
        "toLine": 185,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 204,
        "toLine": 214,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 237,
        "toLine": 247,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 270,
        "toLine": 280,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 297,
        "toLine": 307,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 324,
        "toLine": 334,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 349,
        "toLine": 359,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 440,
        "toLine": 451,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      },
      {
        "fromLine": 468,
        "toLine": 478,
        "oldContent": "ModelBuilder model = new ModelBuilder();",
        "newContent": "// Updated ModelBuilder constructor calls\nCTLModelBuilder model = new CTLModelBuilder();"
      }
    ]
  },
  "extractedClasses": {
    "path/to/CTLModel.java": "public class CTLModel {\n\n\tprivate List<Integer> states;\n\tprivate Map<Integer, List<Integer>> successors;\n\tprivate Map<Integer, List<Label>> labels;\n\n\tpublic CTLModel() {\n\t\tstates = new ArrayList<Integer>();\n\t\tsuccessors = new HashMap<Integer, List<Integer>>();\n\t\tlabels = new HashMap<Integer, List<Label>>();\n\t}\n\n\t// getters and setters for states, successors, and labels\n\n\t// additional methods and logic related to CTLModel if necessary\n}\n"
  },
  "tenperature": 0.9,
  "date": "2024-07-16T13:42:00.080Z"
}