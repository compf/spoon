{
  "refactorings": {
    "src/main/java/spoon/reflect/visitor/ElementPrinterHelper.java": [
      {
        "fromLine": 504,
        "toLabel": 533,
        "oldContent": "\tprivate ListPrinter createListPrinter(boolean startPrefixSpace, String start, boolean startSufficSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\treturn new ListPrinter(printer, startPrefixSpace, start, startSufficSpace, nextPrefixSpace, next, nextSuffixSpace, endPrefixSpace, end);\n\t}\n",
        "newContent": "\tprivate ListPrinter createListPrinter(ListPrinterConfig config) {\n\t\treturn new ListPrinter(printer, config);\n\t}\n"
      },
      {
        "fromLine": 550,
        "toLine": 580,
        "oldContent": "public <T> void printList(Iterable<T> iterable,\n\t\t\tString startKeyword,\n\t\t\tboolean startPrefixSpace, String start, boolean startSuffixSpace,\n\t\t\tboolean nextPrefixSpace, String next, boolean nextSuffixTest, String nextSuffixSpace,\n\t\t\tboolean endPrefixSpace, String end,\n\t\t\tConsumer<T> elementPrinter) {\n\n\t\tif (startKeyword != null) {\n\t\t\tprinter.writeSpace().writeKeyword(startKeyword).writeSpace();\n\t\t}\n\t\ttry (spoon.reflect.visitor.ListPrinter lp = createListPrinter(\n\t\t\t\tstartPrefixSpace, start, startSuffixSpace,\n\t\t\t\tnextPrefixSpace, next, nextSuffixSpace,\n\t\t\t\tendPrefixSpace, end\n\t\t\t)) {\n\t\t\tfor (T item : iterable) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\telementPrinter.accept(item);\n\t\t\t}",
        "newContent": "public <T> void printList(Iterable<T> iterable,\n\t\t\tString startKeyword,\n\t\t\tListPrinterConfig config,\n\t\t\tConsumer<T> elementPrinter) {\n\n\t\tif (startKeyword != null) {\n\t\t\tprinter.writeSpace().writeKeyword(startKeyword).writeSpace();\n\t\t}\n\t\ttry (spoon.reflect.visitor.ListPrinter lp = createListPrinter(config)) {\n\t\t\tfor (T item : iterable) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\telementPrinter.accept(item);\n\t\t\t}"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/ElementPrinterHelper.java": [
      {
        "fromLine": 0,
        "toLine": 9,
        "oldContent": "public ListPrinter createListPrinter(boolean startPrefixSpace, String start, boolean startSufficSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\treturn null;\n\t}\n",
        "newContent": "public ListPrinter createListPrinter(ListPrinterConfig config) {\n\t\treturn null;\n\t}\n"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/NewPattern.java": [
      {
        "fromLine": 16,
        "toLine": 30,
        "oldContent": "elementPrinterHelper.printList(params.getIterable.S(), \n\t\t\t\tparams.startPrefixSpace, \n\t\t\t\tparams.start, \n\t\t\t\tparams.startSuffixSpace, \n\t\t\t\tparams.nextPrefixSpace, \n\t\t\t\tparams.next, \n\t\t\t\tparams.nextSuffixSpace, \n\t\t\t\tparams.endPrefixSpace, \n\t\t\t\tparams.end,\n\t\t\t\tv -> {\n\t\t\t\t\tparams.statements.S();\n\t\t\t\t});",
        "newContent": "elementPrinterHelper.printList(params.getIterable.S(), \n\t\t\t\tnew ListPrinterConfig(params.startPrefixSpace, params.start, params.startSuffixSpace, params.nextPrefixSpace, params.next, params.nextSuffixSpace, params.endPrefixSpace, params.end),\n\t\t\t\tv -> {\n\t\t\t\t\tparams.statements.S();\n\t\t\t\t});"
      },
      {
        "fromLine": 52,
        "toLine": 62,
        "oldContent": "void printList(Iterable<Item> $getItems$, \n\t\t\t\tboolean startPrefixSpace, String start, boolean startSufficSpace, \n\t\t\t\tboolean nextPrefixSpace, String next, boolean nextSuffixSpace, \n\t\t\t\tboolean endPrefixSpace, String end, \n\t\t\t\tConsumer<Item> consumer);",
        "newContent": "void printList(Iterable<Item> $getItems$, ListPrinterConfig config, Consumer<Item> consumer);"
      }
    ],
    "src/main/java/spoon/reflect/visitor/ListPrinter.java": [
      {
        "fromLine": 8,
        "toLine": 39,
        "oldContent": "public ListPrinter(TokenWriter printerHelper, boolean startPrefixSpace, String start, boolean startSuffixSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\tthis.printerTokenWriter = printerHelper;\n\t\tthis.nextPrefixSpace = nextPrefixSpace;\n\t\tthis.separator = next;\n\t\tthis.nextSuffixSpace = nextSuffixSpace;\n\t\tthis.endPrefixSpace = endPrefixSpace;\n\t\tthis.end = end;\n\n\t\tif (startPrefixSpace) {\n\t\t\tprinterHelper.writeSpace();\n\t\t}\n\t\tif (start != null && !start.isEmpty()) {",
        "newContent": "public ListPrinter(TokenWriter printerHelper, ListPrinterConfig config) {\n\t\tthis.printerTokenWriter = printerHelper;\n\t\tthis.nextPrefixSpace = config.isNextPrefixSpace();\n\t\tthis.separator = config.getNext();\n\t\tthis.nextSuffixSpace = config.isNextSuffixSpace();\n\t\tthis.endPrefixSpace = config.isEndPrefixSpace();\n\t\tthis.end = config.getEnd();\n\n\t\tif (config.isStartPrefixSpace()) {\n\t\t\tprinterHelper.writeSpace();\n\t\t}\n\t\tif (config.getStart() != null && !config.getStart().isEmpty()) {"
      }
    ],
    "src/test/java/spoon/test/template/testclasses/replace/OldPattern.java": [
      {
        "fromLine": 41,
        "toLine": 55,
        "oldContent": "try (spoon.reflect.visitor.ListPrinter lp = elementPrinterHelper.createListPrinter(\n\t\t\t\tparams.startPrefixSpace, \n\t\t\t\tparams.start, \n\t\t\t\tparams.startSuffixSpace, \n\t\t\t\tparams.nextPrefixSpace, \n\t\t\t\tparams.next, \n\t\t\t\tparams.nextSuffixSpace, \n\t\t\t\tparams.endPrefixSpace, \n\t\t\t\tparams.end\n\t\t\t)) {\n\t\t\tfor (Item item : params.getIterable.S()) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\tparams.statements.S();\n\t\t\t}",
        "newContent": "try (spoon.reflect.visitor.ListPrinter lp = elementPrinterHelper.createListPrinter(new ListPrinterConfig(\n\t\t\t\tparams.startPrefixSpace, \n\t\t\t\tparams.start, \n\t\t\t\tparams.startSuffixSpace, \n\t\t\t\tparams.nextPrefixSpace, \n\t\t\t\tparams.next, \n\t\t\t\tparams.nextSuffixSpace, \n\t\t\t\tparams.endPrefixSpace, \n\t\t\t\tparams.end\n\t\t\t))) {\n\t\t\tfor (Item item : params.getIterable.S()) {\n\t\t\t\tlp.printSeparatorIfAppropriate();\n\t\t\t\tparams.statements.S();\n\t\t\t}"
      }
    ]
  },
  "extractedClasses": {
    "src/main/java/spoon/reflect/visitor/ListPrinterConfig.java": "public class ListPrinterConfig {\n\n\tprivate boolean startPrefixSpace;\n\tprivate String start;\n\tprivate boolean startSuffixSpace;\n\tprivate boolean nextPrefixSpace;\n\tprivate String next;\n\tprivate boolean nextSuffixSpace;\n\tprivate boolean endPrefixSpace;\n\tprivate String end;\n\n\tpublic ListPrinterConfig(boolean startPrefixSpace, String start, boolean startSuffixSpace, boolean nextPrefixSpace, String next, boolean nextSuffixSpace, boolean endPrefixSpace, String end) {\n\t\tthis.startPrefixSpace = startPrefixSpace;\n\t\tthis.start = start;\n\t\tthis.startSuffixSpace = startSuffixSpace;\n\t\tthis.nextPrefixSpace = nextPrefixSpace;\n\t\tthis.next = next;\n\t\tthis.nextSuffixSpace = nextSuffixSpace;\n\t\tthis.endPrefixSpace = endPrefixSpace;\n\t\tthis.end = end;\n\t}\n\n\tpublic boolean isStartPrefixSpace() { return startPrefixSpace; }\n\tpublic String getStart() { return start; }\n\tpublic boolean isStartSuffixSpace() { return startSuffixSpace; }\n\tpublic boolean isNextPrefixSpace() { return nextPrefixSpace; }\n\tpublic String getNext() { return next; }\n\tpublic boolean isNextSuffixSpace() { return nextSuffixSpace; }\n\tpublic boolean isEndPrefixSpace() { return endPrefixSpace; }\n\tpublic String getEnd() { return end; }\n\n\t// Add any necessary getters, setters or additional functionality here\n}\n"
  },
  "tenperature": 0.9,
  "date": "2024-07-16T20:29:20.265Z"
}